version: 2.1

orbs:
  codecov: codecov/codecov@1.0.5

executors:
  rust:
    description: Executor environment for building Rust crates.
    docker:
      # the primary container, where your job's commands are run
      - image: rust:1

# commands originally copied from https://circleci.com/orbs/registry/orb/glotrade/rust
commands:
  checkout_with_submodules:
    description: Check out source code and submodules.
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: |
            git submodule sync
            git submodule update --init

  update_toolchain:
    description: Update the Rust toolchain to use for building.
    parameters:
      toolchain:
        description: Rust toolchain to use. Overrides the default toolchain (stable) or any toolchain specified in the project via `rust-toolchain`.
        type: string
        default: ""
    steps:
      - run:
          name: Update toolchain
          command: |
            test -z "<<parameters.toolchain>>" || echo "<<parameters.toolchain>>" >rust-toolchain
            rustup show active-toolchain
      - run:
          name: Version information
          command: |
            rustup --version
            rustc --version
            cargo --version

  check:
    description: Run compiler checks on all targets of a Rust crate.
    steps:
      - run:
          name: Calculate dependencies
          command: test -e Cargo.lock || cargo generate-lockfile
      - run:
          name: Run compiler checks
          command: cargo check --all --all-targets

  clippy:
    description: Run clippy checks on all targets of a Rust crate.
    steps:
      - run:
          name: Calculate dependencies
          command: test -e Cargo.lock || cargo generate-lockfile
      - run:
          name: Run clippy checks
          command: |
            if rustup component add clippy; then
              cargo clippy --all --all-targets -- -Dwarnings -Drust-2018-idioms
            else
              echo Skipping clippy
            fi

  format:
    description: Check formatting of all sources of a Rust crate.
    steps:
      - run:
          name: Calculate dependencies
          command: test -e Cargo.lock || cargo generate-lockfile
      - run:
          name: Check formatting
          command: |
            if rustup component add rustfmt; then
              cargo fmt --all -- --check
            else
              echo Skipping rustfmt
            fi

  # Not used actually, we use docker on machine instead.
  install_tarpaulin:
    description: Install cargo tarpaulin for code coverage.
    parameters:
      version:
        description: tarpaulin version
        type: string
        default: "0.8.6"
    steps:
      - run:
          name: Install tarpaulin
          command: cargo install cargo-tarpaulin --version <<parameters.version>>

  build:
    description: Build all targets of a Rust crate.
    parameters:
      release:
        description: By default, the crate is build in debug mode without optimizations. Set this to true to compile in release mode.
        type: boolean
        default: false
    steps:
      - run:
          name: Calculate dependencies
          command: |
            rustc --version >rust-version
            test -e Cargo.lock || cargo generate-lockfile
      - restore_cache:
          keys:
            - v1-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}
            - v1-cargo-cache-{{arch}}-{{checksum "rust-version"}}-
      - run:
          name: Build all targets
          command: cargo build --all --all-targets<<#parameters.release>> --release<</parameters.release>>
      - save_cache:
          # List of directories which should be added to the cache
          paths:
            - /usr/local/cargo/registry
            - ./target
          key: v1-cargo-cache-{{arch}}-{{checksum "rust-version"}}-<<parameters.release>>-{{checksum "Cargo.lock"}}

  test:
    description: Run all tests of a Rust crate. Make sure to build first.
    parameters:
      release:
        description: By default, the crate is build in debug mode without optimizations. Set this to true to compile in release mode.
        type: boolean
        default: false
      nocapture:
        description: By default the rust test harness hides output from test execution to keep results readable. Test output can be recovered (e.g., for debugging) by passing `--nocapture` to the test binaries.
        type: boolean
        default: false
    steps:
      - run:
          name: Run all tests
          command: cargo test --all<<#parameters.release>> --release<</parameters.release>><<#parameters.nocapture>> -- --nocapture<</parameters.nocapture>>

jobs:
  test:
    executor: rust
    steps:
      # check out the code in the project directory
      - checkout
      # build with cache
      - build
      - test:
          nocapture: true

  coverage:
    machine: true
    steps:
      - checkout
      - run:
          name: Coverage
          command: docker run --security-opt seccomp=unconfined -v "${PWD}:/volume" xd009642/tarpaulin cargo tarpaulin --out Xml --all-features
      - codecov/upload:
          token: 37ecc6ec-3f78-4e33-a52e-1764571c6253

workflows:
  version: 2
  main:
    jobs:
      - test
      - coverage:
          requires:
            - test

